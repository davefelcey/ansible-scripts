---
- name: Check if JCS instance exists
  uri:
    url: "{{ jcs_paas_rest_endpoint }}/paas/service/jcs/api/v1.1/instances/{{ identity_domain }}/{{ jcs_instance_name }}"
    method: GET
    user: "{{ username }}"
    password: "{{ password }}"
    force_basic_auth: true
    headers: 
      X-ID-TENANT-NAME: "{{ identity_domain }}"
    validate_certs: no
    return_content: yes
    status_code: 200, 404
    return_content: yes
  register: jcs_instance_details
  
- name: Delete JCS instance if it exists
  uri:
    url: "{{ jcs_paas_rest_endpoint }}/paas/service/jcs/api/v1.1/instances/{{ identity_domain }}/{{ jcs_instance_name }}"
    method: PUT
    user: "{{ username }}"
    password: "{{ password }}"
    force_basic_auth: true
    headers: 
      X-ID-TENANT-NAME: "{{ identity_domain }}"
      Content-Type: "application/vnd.com.oracle.oracloud.provisioning.Service+json"
    validate_certs: no
    body_format: json
    body:
      '{
         "dbaName": "{{ db_service_name }}",
         "dbaPassword": "{{ db_password }}",
         "forceDelete": true,
         "skipBackupOnTerminate": true
       }'
    status_code: 202
    return_content: yes
  when: jcs_instance_details.status == 200
  register: delete_jcs_instance_details

- name: Wait if JCS instance exists
  uri:
    url: "{{ jcs_paas_rest_endpoint }}/paas/service/jcs/api/v1.1/instances/{{ identity_domain }}/{{ jcs_instance_name }}"
    method: GET
    user: "{{ username }}"
    password: "{{ password }}"
    force_basic_auth: true
    headers: 
      X-ID-TENANT-NAME: "{{ identity_domain }}"
    validate_certs: no
    return_content: yes
    status_code: "200"
    return_content: yes
  register: jcs_instance_details
  until: jcs_instance_details.status == 404
  retries: 20
  delay: 30
  ignore_errors: yes